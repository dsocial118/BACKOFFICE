# Generated by Django 4.2.20 on 2025-06-15 19:02

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("configuraciones", "0001_initial"),
        ("duplas", "0001_initial"),
        ("organizaciones", "0001_initial"),
        ("ciudadanos", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="CategoriaComedor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255)),
                ("puntuacion_min", models.IntegerField()),
                ("puntuacion_max", models.IntegerField()),
            ],
            options={
                "verbose_name": "Categoria de Comedor",
                "verbose_name_plural": "Categorias de Comedor",
            },
        ),
        migrations.CreateModel(
            name="Comedor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255)),
                (
                    "id_externo",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Id Externo"
                    ),
                ),
                (
                    "codigo_de_proyecto",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Código de Proyecto",
                    ),
                ),
                (
                    "comienzo",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(2025),
                        ],
                        verbose_name="Año en el que comenzó a funcionar",
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Sin Ingreso", "Sin Ingreso"),
                            ("Asignado a Dupla Técnica", "Asignado a Dupla Técnica"),
                        ],
                        default="Sin Ingreso",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "calle",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="La dirección solo puede contener letras, números, espacios y los caracteres ., -",
                                regex="^[a-zA-Z0-9\\s.,áéíóúÁÉÍÓÚñÑ-]*$",
                            )
                        ],
                    ),
                ),
                ("numero", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "piso",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="La dirección solo puede contener letras, números, espacios y los caracteres ., -",
                                regex="^[a-zA-Z0-9\\s.,áéíóúÁÉÍÓÚñÑ-]*$",
                            )
                        ],
                    ),
                ),
                (
                    "departamento",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="La dirección solo puede contener letras, números, espacios y los caracteres ., -",
                                regex="^[a-zA-Z0-9\\s.,áéíóúÁÉÍÓÚñÑ-]*$",
                            )
                        ],
                    ),
                ),
                (
                    "manzana",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="La dirección solo puede contener letras, números, espacios y los caracteres ., -",
                                regex="^[a-zA-Z0-9\\s.,áéíóúÁÉÍÓÚñÑ-]*$",
                            )
                        ],
                    ),
                ),
                (
                    "lote",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="La dirección solo puede contener letras, números, espacios y los caracteres ., -",
                                regex="^[a-zA-Z0-9\\s.,áéíóúÁÉÍÓÚñÑ-]*$",
                            )
                        ],
                    ),
                ),
                (
                    "entre_calle_1",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="La dirección solo puede contener letras, números, espacios y los caracteres ., -",
                                regex="^[a-zA-Z0-9\\s.,áéíóúÁÉÍÓÚñÑ-]*$",
                            )
                        ],
                    ),
                ),
                (
                    "entre_calle_2",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="La dirección solo puede contener letras, números, espacios y los caracteres ., -",
                                regex="^[a-zA-Z0-9\\s.,áéíóúÁÉÍÓÚñÑ-]*$",
                            )
                        ],
                    ),
                ),
                (
                    "latitud",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                    ),
                ),
                (
                    "longitud",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                    ),
                ),
                ("partido", models.CharField(blank=True, max_length=255, null=True)),
                ("barrio", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "codigo_postal",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(999999),
                        ],
                    ),
                ),
                (
                    "foto_legajo",
                    models.ImageField(blank=True, null=True, upload_to="comedor/"),
                ),
                ("test", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "dupla",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="duplas.dupla",
                    ),
                ),
                (
                    "localidad",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="configuraciones.localidad",
                    ),
                ),
                (
                    "municipio",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="configuraciones.municipio",
                    ),
                ),
                (
                    "organizacion",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="organizaciones.organizacion",
                    ),
                ),
            ],
            options={
                "verbose_name": "comedor",
                "verbose_name_plural": "comedores",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="Programas",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "Programa",
                "verbose_name_plural": "Programas",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Referente",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Nombre del referente",
                    ),
                ),
                (
                    "apellido",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Apellido del referente",
                    ),
                ),
                (
                    "mail",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name="Mail del referente",
                    ),
                ),
                (
                    "celular",
                    models.BigIntegerField(
                        blank=True, null=True, verbose_name="Celular del referente"
                    ),
                ),
                (
                    "documento",
                    models.BigIntegerField(
                        blank=True, null=True, verbose_name="Documento del referente"
                    ),
                ),
                (
                    "funcion",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Funcion del referente",
                    ),
                ),
            ],
            options={
                "verbose_name": "Referente",
                "verbose_name_plural": "Referentes",
            },
        ),
        migrations.CreateModel(
            name="TipoDeComedor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "Tipo de comedor",
                "verbose_name_plural": "Tipos de comedor",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="ValorComida",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tipo", models.CharField(max_length=50)),
                ("valor", models.DecimalField(decimal_places=2, max_digits=10)),
                ("fecha", models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name="ImagenComedor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("imagen", models.ImageField(upload_to="comedor/")),
                (
                    "comedor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="imagenes",
                        to="comedores.comedor",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="comedor",
            name="programa",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="comedores.programas",
            ),
        ),
        migrations.AddField(
            model_name="comedor",
            name="provincia",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="configuraciones.provincia",
            ),
        ),
        migrations.AddField(
            model_name="comedor",
            name="referente",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="comedores.referente",
            ),
        ),
        migrations.AddField(
            model_name="comedor",
            name="tipocomedor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="comedores.tipodecomedor",
            ),
        ),
        migrations.CreateModel(
            name="Observacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("observador", models.CharField(blank=True, max_length=255)),
                (
                    "fecha_visita",
                    models.DateTimeField(blank=True, default=django.utils.timezone.now),
                ),
                ("observacion", models.TextField()),
                (
                    "comedor",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="comedores.comedor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Observacion",
                "verbose_name_plural": "Observaciones",
                "indexes": [
                    models.Index(
                        fields=["comedor"], name="comedores_o_comedor_36d2df_idx"
                    )
                ],
                "unique_together": {("comedor", "fecha_visita")},
            },
        ),
        migrations.CreateModel(
            name="Nomina",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fecha", models.DateTimeField(auto_now_add=True)),
                ("observaciones", models.TextField(blank=True, null=True)),
                ("nombre", models.TextField(blank=True, null=True)),
                ("apellido", models.TextField(blank=True, null=True)),
                ("dni", models.IntegerField(blank=True, null=True)),
                (
                    "comedor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="comedores.comedor",
                    ),
                ),
                (
                    "estado",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="ciudadanos.estadointervencion",
                    ),
                ),
                (
                    "sexo",
                    models.ForeignKey(
                        default=1,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="configuraciones.sexo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Nomina",
                "verbose_name_plural": "Nominas",
                "ordering": ["-fecha"],
                "indexes": [
                    models.Index(
                        fields=["comedor"], name="comedores_n_comedor_2179d8_idx"
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="comedor",
            index=models.Index(fields=["nombre"], name="comedores_c_nombre_a1fc3f_idx"),
        ),
    ]
