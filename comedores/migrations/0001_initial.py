# Generated by Django 4.0.2 on 2024-09-18 14:02

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('legajos', '0003_alter_dimensioneducacion_localidadinstitucion_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='CantidadColaboradores',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Cantidad de colaboradores',
                'verbose_name_plural': 'Cantidades de colaboradores',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Colaboradores',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('colaboradores_capacitados_alimentos', models.BooleanField(help_text='¿Cuentan con personas que realizan tareas capacitadas para la manipulación de alimentos?')),
                ('colaboradores_recibieron_capacitacion_alimentos', models.BooleanField(help_text='¿Los colaboradores recibieron capacitación sobre manipulación segura de alimentos?')),
                ('colaboradores_capacitados_salud_seguridad', models.BooleanField(help_text='¿Los colaboradores recibieron capacitación sobre salud y seguridad ocupacional?')),
                ('colaboradores_recibieron_capacitacion_emergencias', models.BooleanField(help_text='¿Los colaboradores recibieron capacitación sobre preparación y respuesta a las emergencias?')),
                ('colaboradores_recibieron_capacitacion_violencia', models.BooleanField(help_text='¿Los colaboradores recibieron capacitación sobre prevención de violencia de género incluyendo acoso sexual, explotación sexual y abuso infantil?')),
                ('cantidad_colaboradores', models.ForeignKey(help_text='¿Qué cantidad de personas realizan tareas en el Comedor?', on_delete=django.db.models.deletion.PROTECT, to='comedores.cantidadcolaboradores')),
            ],
        ),
        migrations.CreateModel(
            name='Comedor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255)),
                ('comienzo', models.IntegerField(help_text='Año de inicio de la actividad', validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2024)])),
                ('calle', models.CharField(max_length=255)),
                ('numero', models.PositiveIntegerField()),
                ('entre_calle_1', models.CharField(max_length=255)),
                ('entre_calle_2', models.CharField(max_length=255)),
                ('partido', models.CharField(max_length=255)),
                ('barrio', models.CharField(max_length=255)),
                ('codigo_postal', models.IntegerField(default=1000, validators=[django.core.validators.MinValueValidator(999), django.core.validators.MaxValueValidator(100000)])),
                ('localidad', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='legajos.legajolocalidad')),
                ('municipio', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='legajos.legajomunicipio')),
                ('provincia', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='legajos.legajoprovincias')),
                ('referente', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='legajos.legajos')),
            ],
            options={
                'verbose_name': 'comedor',
                'verbose_name_plural': 'comedores',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Espacio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('espacio_fisico_otro', models.CharField(blank=True, help_text="Si eligió 'Otro', especificar", max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Espacio fisico de comedor',
                'verbose_name_plural': 'Espacios fisicos de comedores',
            },
        ),
        migrations.CreateModel(
            name='FrecuenciaLimpieza',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Frecuencia de limpieza',
                'verbose_name_plural': 'Frecuencias de limpieza',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='FrecuenciaRecepcionRecursos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Frecuencia de recepcion de recursos',
                'verbose_name_plural': 'Frecuencias de recepcion de recursos',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='FuenteCompras',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('almacen_cercano', models.BooleanField()),
                ('verduleria', models.BooleanField()),
                ('granja', models.BooleanField()),
                ('carniceria', models.BooleanField()),
                ('pescaderia', models.BooleanField()),
                ('supermercado', models.BooleanField()),
                ('mercado_central', models.BooleanField()),
                ('ferias_comunales', models.BooleanField()),
                ('mayoristas', models.BooleanField()),
                ('otro', models.BooleanField()),
            ],
            options={
                'verbose_name': 'Fuente de compras',
                'verbose_name_plural': 'Fuentes de compras',
            },
        ),
        migrations.CreateModel(
            name='FuenteRecursos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recibe_donaciones_particulares', models.BooleanField()),
                ('recibe_estado_nacional', models.BooleanField()),
                ('recibe_estado_provincial', models.BooleanField()),
                ('recibe_estado_municipal', models.BooleanField()),
                ('recibe_otros', models.BooleanField()),
                ('frecuencia_donaciones_particulares', models.ForeignKey(help_text='Si recibe, ¿Con qué frecuencia recibe donaciones particulares?', on_delete=django.db.models.deletion.PROTECT, related_name='frecuencia_donaciones_particulares', to='comedores.frecuenciarecepcionrecursos')),
                ('frecuencia_estado_municipal', models.ForeignKey(help_text='Si recibe, ¿Con qué frecuencia recibe del estado municipal?', on_delete=django.db.models.deletion.PROTECT, related_name='frecuencia_estado_municipal', to='comedores.frecuenciarecepcionrecursos')),
                ('frecuencia_estado_nacional', models.ForeignKey(help_text='Si recibe, ¿Con qué frecuencia recibe del estado nacional?', on_delete=django.db.models.deletion.PROTECT, related_name='frecuencia_estado_nacional', to='comedores.frecuenciarecepcionrecursos')),
                ('frecuencia_estado_provincial', models.ForeignKey(help_text='Si recibe, ¿Con qué frecuencia recibe del estado provincial?', on_delete=django.db.models.deletion.PROTECT, related_name='frecuencia_estado_provincial', to='comedores.frecuenciarecepcionrecursos')),
                ('frecuencia_otros', models.ForeignKey(help_text='Si recibe, ¿Con qué frecuencia recibe de otras fuentes?', on_delete=django.db.models.deletion.PROTECT, related_name='frecuencia_otros', to='comedores.frecuenciarecepcionrecursos')),
            ],
            options={
                'verbose_name': 'Fuente de recursos',
                'verbose_name_plural': 'Fuentes de recursos',
            },
        ),
        migrations.CreateModel(
            name='FuncionamientoPrestacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('servicio_por_turnos', models.BooleanField(help_text='¿El servicio esta organizado por turnos?')),
                ('cantidad_turnos', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Funcionamiento de comedor',
                'verbose_name_plural': 'Funcionamientos de comedores',
            },
        ),
        migrations.CreateModel(
            name='NombreDia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Nombre del dia',
                'verbose_name_plural': 'Nombre de los dias',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='TipoAgua',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Tipo de abastecimiento de agua',
                'verbose_name_plural': 'Tipos de abastecimientos de agua',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='TipoCombustible',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Tipo de abastecimiento de combustible',
                'verbose_name_plural': 'Tipos de abastecimientos de combustible',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='TipoComida',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Tipo de comida',
                'verbose_name_plural': 'Tipos de comida',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='TipoDesague',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Tipo de desague del hinodoro',
                'verbose_name_plural': 'Tipos de desagues del hinodoro',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='TipoEspacio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Tipo de espacio fisico',
                'verbose_name_plural': 'Tipos de espacios fisicos',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='TipoModalidadPrestacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Tipo de Modalidad de Prestación',
                'verbose_name_plural': 'Tipos de Modalidades de Prestación',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='TipoRecurso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Tipo de recurso recibido',
                'verbose_name_plural': 'Tipos de recursos recibidos',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Relevamiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_visita', models.DateTimeField(default=django.utils.timezone.now)),
                ('colaboradores', models.OneToOneField(help_text='Informacion relacionada a las personas que realizan tareas en el comedor', on_delete=django.db.models.deletion.PROTECT, to='comedores.colaboradores')),
                ('comedor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='comedores.comedor')),
                ('compras', models.OneToOneField(help_text='Informacion relacionada a la realizacion de compras para abastecer el comedor', on_delete=django.db.models.deletion.PROTECT, to='comedores.fuentecompras')),
                ('espacio', models.OneToOneField(help_text='Informacion relacionada al espacio fisico del comedor', on_delete=django.db.models.deletion.PROTECT, to='comedores.espacio')),
                ('funcionamiento', models.OneToOneField(help_text='Informacion relacionada al funcionamiento del comedor', on_delete=django.db.models.deletion.PROTECT, to='comedores.funcionamientoprestacion')),
                ('recursos', models.OneToOneField(help_text='Informacion relacionada a las fuentes de recursos del comedor', on_delete=django.db.models.deletion.PROTECT, to='comedores.fuenterecursos')),
            ],
            options={
                'verbose_name': 'Relevamiento',
                'verbose_name_plural': 'Relevamientos',
            },
        ),
        migrations.CreateModel(
            name='Prestacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad_actual_personas', models.PositiveIntegerField()),
                ('cantidad_personas_espera', models.PositiveIntegerField(blank=True, null=True)),
                ('nombre_dia', models.ForeignKey(help_text='Nombre del dia en que se brinda la prestacion', on_delete=django.db.models.deletion.PROTECT, to='comedores.nombredia')),
                ('relevamiento', models.ForeignKey(help_text='Relevamiento al que pertenece la prestacion', on_delete=django.db.models.deletion.CASCADE, to='comedores.relevamiento')),
                ('tipo_comida', models.ForeignKey(help_text='Tipo de comida en que se brinda la prestacion', on_delete=django.db.models.deletion.PROTECT, to='comedores.tipocomida')),
            ],
            options={
                'verbose_name': 'Prestacion',
                'verbose_name_plural': 'Prestaciones',
            },
        ),
        migrations.CreateModel(
            name='Observacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateTimeField(auto_now=True)),
                ('observacion', models.TextField()),
                ('comedor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='comedores.comedor')),
            ],
            options={
                'verbose_name': 'Observacion',
                'verbose_name_plural': 'Observaciones',
            },
        ),
        migrations.AddField(
            model_name='funcionamientoprestacion',
            name='modalidad_prestacion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='comedores.tipomodalidadprestacion'),
        ),
        migrations.AddField(
            model_name='fuenterecursos',
            name='recursos_donaciones_particulares',
            field=models.ForeignKey(help_text='¿Qué tipo de recursos recibe de donaciones particulares?', on_delete=django.db.models.deletion.PROTECT, related_name='tipo_donaciones_particulares', to='comedores.tiporecurso'),
        ),
        migrations.AddField(
            model_name='fuenterecursos',
            name='recursos_estado_municipal',
            field=models.ForeignKey(help_text='¿Qué tipo de recursos recibe del estado municipal?', on_delete=django.db.models.deletion.PROTECT, related_name='tipo_estado_municipal', to='comedores.tiporecurso'),
        ),
        migrations.AddField(
            model_name='fuenterecursos',
            name='recursos_estado_nacional',
            field=models.ForeignKey(help_text='¿Qué tipo de recursos recibe del estado nacional?', on_delete=django.db.models.deletion.PROTECT, related_name='tipo_estado_nacional', to='comedores.tiporecurso'),
        ),
        migrations.AddField(
            model_name='fuenterecursos',
            name='recursos_estado_provincial',
            field=models.ForeignKey(help_text='¿Qué tipo de recursos recibe del estado provincial?', on_delete=django.db.models.deletion.PROTECT, related_name='tipo_estado_provincial', to='comedores.tiporecurso'),
        ),
        migrations.AddField(
            model_name='fuenterecursos',
            name='recursos_otros',
            field=models.ForeignKey(help_text='¿Qué tipo de recursos recibe de otras fuentes?', on_delete=django.db.models.deletion.PROTECT, related_name='tipo_otros', to='comedores.tiporecurso'),
        ),
        migrations.CreateModel(
            name='EspacioPrestacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('espacio_equipado', models.BooleanField(help_text='¿Cuenta con espacio y equipamiento (mesas, bancos o sillas)?')),
                ('tiene_ventilacion', models.BooleanField(help_text='¿El espacio donde tiene actividad el comedor cuenta con un sistema de ventilación adecuado?')),
                ('tiene_salida_emergencia', models.BooleanField(help_text='¿El espacio donde tiene actividad el comedor cuenta con salidas de emergencia?')),
                ('salida_emergencia_senializada', models.BooleanField(help_text='¿Están señalizadas las salidas de emergencia?')),
                ('tiene_equipacion_incendio', models.BooleanField(help_text='El lugar cuenta con elementos para apagar incendios (matafuegos / manguera)?')),
                ('tiene_botiquin', models.BooleanField(help_text='¿El lugar cuenta con un botiquín de primeros auxilios?')),
                ('tiene_buena_iluminacion', models.BooleanField(help_text='¿El espacio donde tiene actividad el comedor cuenta con buena iluminación?')),
                ('tiene_sanitarios', models.BooleanField(help_text='¿El lugar cuenta con baño para las personas que realizan tareas en el comedor y para los destinatarios?')),
                ('tiene_buzon_quejas', models.BooleanField(help_text='¿El comedor cuenta con un buzón de quejas y reclamos en el lugar?')),
                ('tiene_gestion_quejas', models.BooleanField(help_text='¿Hay en el lugar cartelería con información sobre los mecanismos de gestión de quejas, reclamos y sugerencias del comedor?')),
                ('desague_hinodoro', models.ForeignKey(help_text='Si hay sanitarios, ¿cómo es el desagüe del hinodoro?', on_delete=django.db.models.deletion.PROTECT, to='comedores.tipodesague')),
                ('frecuencia_limpieza', models.ForeignKey(help_text='¿Con qué frecuencia se realiza la limpieza de las instalaciones?', on_delete=django.db.models.deletion.PROTECT, to='comedores.frecuencialimpieza')),
            ],
            options={
                'verbose_name': 'Espacio donde se brinda la prestacion del comedor',
                'verbose_name_plural': 'Espacios donde se brinda la prestacion del comedor',
            },
        ),
        migrations.CreateModel(
            name='EspacioCocina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('espacio_elaboracion_alimentos', models.BooleanField(help_text='¿Cuenta con un espacio específico para elaboración de alimentos?')),
                ('almacenamiento_alimentos_secos', models.BooleanField(help_text='¿El espacio posee un lugar para el almacenamiento de los alimentos secos que compra / recibe?')),
                ('refrigerador', models.BooleanField(help_text='¿Cuenta con heladera o freezer?')),
                ('recipiente_residuos_organicos', models.BooleanField(help_text='¿La cocina cuenta con un espacio o recipientes destinados a la disposición de residuos orgánicos y asimilables?')),
                ('recipiente_residuos_reciclables', models.BooleanField(help_text='¿El comedor cuenta con un espacio o recipientes destinados a la disposición de residuos reciclables?')),
                ('recipiente_otros_residuos', models.BooleanField(help_text='¿El comedor genera otro tipo de residuos? ¿Cuenta con un espacio destinados a la disposición de dichos residuos?')),
                ('instalacion_electrica', models.BooleanField()),
                ('abastecimiento_agua', models.ForeignKey(help_text='¿Cómo se abastece de agua el comedor?', on_delete=django.db.models.deletion.PROTECT, to='comedores.tipoagua')),
                ('abastecimiento_combustible', models.ManyToManyField(help_text='¿Cómo se abastece de combustible?', related_name='espacios', to='comedores.TipoCombustible')),
            ],
            options={
                'verbose_name': 'Espacio de cocina y almacenamiento de alimentos',
                'verbose_name_plural': 'Espacios de cocina y almacenamiento de alimentos',
            },
        ),
        migrations.AddField(
            model_name='espacio',
            name='cocina',
            field=models.OneToOneField(help_text='Informacion relacionada a la cocina y almacenamiento de alimentos', on_delete=django.db.models.deletion.PROTECT, to='comedores.espaciococina'),
        ),
        migrations.AddField(
            model_name='espacio',
            name='prestacion',
            field=models.OneToOneField(help_text='Informacion relacionada al espacio donde se brinda la prestacion del comedor', on_delete=django.db.models.deletion.PROTECT, to='comedores.espacioprestacion'),
        ),
        migrations.AddField(
            model_name='espacio',
            name='tipo_espacio_fisico',
            field=models.ForeignKey(help_text='¿En qué tipo de espacio físico funciona el comedor?', on_delete=django.db.models.deletion.PROTECT, to='comedores.tipoespacio'),
        ),
        migrations.AddIndex(
            model_name='relevamiento',
            index=models.Index(fields=['comedor'], name='comedores_r_comedor_b42af5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='prestacion',
            unique_together={('relevamiento', 'tipo_comida', 'nombre_dia')},
        ),
        migrations.AddIndex(
            model_name='observacion',
            index=models.Index(fields=['comedor'], name='comedores_o_comedor_36d2df_idx'),
        ),
        migrations.AddIndex(
            model_name='comedor',
            index=models.Index(fields=['nombre'], name='comedores_c_nombre_a1fc3f_idx'),
        ),
    ]
