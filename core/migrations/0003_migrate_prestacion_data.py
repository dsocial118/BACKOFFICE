# Generated by Django 4.2.20 on 2025-07-14 18:45

from django.db import migrations


def migrate_prestacion_data(apps, schema_editor):
    """
    Migra los datos del modelo Prestacion viejo (relevamientos) al nuevo modelo unificado (core).
    """
    # Obtener los modelos
    new_prestacion = apps.get_model("core", "Prestacion")
    relevamiento = apps.get_model("relevamientos", "Relevamiento")

    # Lista de días de la semana
    dias = ["lunes", "martes", "miercoles", "jueves", "viernes", "sabado", "domingo"]
    tipos_comida = ["desayuno", "almuerzo", "merienda", "cena"]

    # Obtener todos los relevamientos que tienen prestación
    relevamientos_con_prestacion = relevamiento.objects.filter(prestacion__isnull=False)

    for rel in relevamientos_con_prestacion:
        _migrate_single_relevamiento(rel, new_prestacion, dias, tipos_comida)


def _migrate_single_relevamiento(rel, new_prestacion, dias, tipos_comida):
    """Helper function para migrar un solo relevamiento"""
    old_prestacion = rel.prestacion
    comedor = rel.comedor

    # Para cada día de la semana, crear un registro en el nuevo modelo
    for dia in dias:
        # Verificar si ya existe para evitar duplicados
        if new_prestacion.objects.filter(comedor=comedor, dia=dia).exists():
            continue

        # Crear el nuevo registro de prestación
        nueva_prestacion = new_prestacion(comedor=comedor, dia=dia)

        # Migrar los datos por tipo de comida
        has_prestacion = False
        for tipo in tipos_comida:
            campo_actual = f"{dia}_{tipo}_actual"
            campo_espera = f"{dia}_{tipo}_espera"

            # Obtener valores del modelo viejo
            cantidad_actual = getattr(old_prestacion, campo_actual, None)
            cantidad_espera = getattr(old_prestacion, campo_espera, None)

            # Si hay datos, marcar como True y guardar cantidades
            if cantidad_actual and cantidad_actual > 0:
                setattr(nueva_prestacion, tipo, True)
                setattr(nueva_prestacion, f"{tipo}_cantidad_actual", cantidad_actual)
                has_prestacion = True

            if cantidad_espera and cantidad_espera > 0:
                setattr(nueva_prestacion, tipo, True)
                setattr(nueva_prestacion, f"{tipo}_cantidad_espera", cantidad_espera)
                has_prestacion = True

        # Solo guardar si hay al menos una prestación
        if has_prestacion:
            nueva_prestacion.save()


def reverse_migrate_prestacion_data(apps, schema_editor):
    """
    Función reversa para deshacer la migración (opcional)
    """
    new_prestacion = apps.get_model("core", "Prestacion")
    # Eliminar todas las prestaciones migradas
    new_prestacion.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0002_add_prestacion_model"),
        ("relevamientos", "0001_initial"),  # Asegurar que relevamientos existe
    ]

    operations = [
        migrations.RunPython(migrate_prestacion_data, reverse_migrate_prestacion_data),
    ]
