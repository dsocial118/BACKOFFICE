# Generated by Django 4.2.20 on 2025-06-15 19:52

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("comedores", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Anexo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "comedor_merendero",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "insumos_organizacion",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "servicio_internet",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "zona_inundable",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "actividades_jardin_maternal",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "actividades_jardin_infantes",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "apoyo_escolar",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "alfabetizacion_terminalidad",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "capacitaciones_talleres",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "promocion_salud",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "actividades_discapacidad",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "necesidades_alimentarias",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "actividades_recreativas",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "actividades_culturales",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "emprendimientos_productivos",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "actividades_religiosas",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "actividades_huerta",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "espacio_huerta",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "otras_actividades",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                ("cuales_otras_actividades", models.TextField(blank=True, null=True)),
                (
                    "veces_recibio_insumos_2024",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="¿Cuántas veces recibió estos insumos en el año 2024?",
                    ),
                ),
            ],
            options={
                "verbose_name": "Anexo",
                "verbose_name_plural": "Anexos",
            },
        ),
        migrations.CreateModel(
            name="CantidadColaboradores",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Cantidad de colaboradores",
                "verbose_name_plural": "Cantidades de colaboradores",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="Colaboradores",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "colaboradores_capacitados_alimentos",
                    models.BooleanField(
                        default=False,
                        verbose_name="3.1.2 ¿El Comedor/Merendero cuentan con personas que realizan tareas capacitadas para la manipulación de alimentos?",
                    ),
                ),
                (
                    "colaboradores_recibieron_capacitacion_alimentos",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "colaboradores_capacitados_salud_seguridad",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "colaboradores_recibieron_capacitacion_emergencias",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "colaboradores_recibieron_capacitacion_violencia",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="¿Los colaboradores recibieron capacitación sobre prevención de violencia de género incluyendo acoso sexual, explotación sexual y abuso infantil?",
                    ),
                ),
                (
                    "cantidad_colaboradores",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.cantidadcolaboradores",
                        verbose_name="3.1.1 ¿Qué cantidad de personas realizan tareas en el Comedor / Merendero?",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Espacio",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "espacio_fisico_otro",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="2.1.2 Si eligió 'Otro', especificar",
                    ),
                ),
            ],
            options={
                "verbose_name": "Espacio fisico de comedor",
                "verbose_name_plural": "Espacios fisicos de comedores",
            },
        ),
        migrations.CreateModel(
            name="Excepcion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("descripcion", models.TextField(blank=True, null=True)),
                (
                    "latitud",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                    ),
                ),
                (
                    "longitud",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                    ),
                ),
                ("adjuntos", models.JSONField(blank=True, default=list, null=True)),
                ("firma", models.CharField(blank=True, max_length=600, null=True)),
            ],
            options={
                "verbose_name": "Excepcion de comedor",
                "verbose_name_plural": "Excepciones de comedor",
            },
        ),
        migrations.CreateModel(
            name="FrecuenciaLimpieza",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Frecuencia de limpieza",
                "verbose_name_plural": "Frecuencias de limpieza",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="FrecuenciaRecepcionRecursos",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Frecuencia de recepcion de recursos",
                "verbose_name_plural": "Frecuencias de recepcion de recursos",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="FuenteCompras",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "almacen_cercano",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "verduleria",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                ("granja", models.BooleanField(blank=True, default=False, null=True)),
                (
                    "carniceria",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "pescaderia",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "supermercado",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "mercado_central",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "ferias_comunales",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "mayoristas",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                ("otro", models.BooleanField(blank=True, default=False, null=True)),
            ],
            options={
                "verbose_name": "Fuente de compras",
                "verbose_name_plural": "Fuentes de compras",
            },
        ),
        migrations.CreateModel(
            name="FuenteRecursos",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("recibe_donaciones_particulares", models.BooleanField(default=False)),
                ("recibe_estado_nacional", models.BooleanField(default=False)),
                ("recibe_estado_provincial", models.BooleanField(default=False)),
                ("recibe_estado_municipal", models.BooleanField(default=False)),
                ("recibe_otros", models.BooleanField(default=False)),
                (
                    "frecuencia_donaciones_particulares",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="frecuencia_donaciones_particulares",
                        to="relevamientos.frecuenciarecepcionrecursos",
                        verbose_name="4.1.8 Si recibe, ¿Con qué frecuencia recibe donaciones particulares?",
                    ),
                ),
                (
                    "frecuencia_estado_municipal",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="frecuencia_estado_municipal",
                        to="relevamientos.frecuenciarecepcionrecursos",
                        verbose_name="4.1.16Si recibe, ¿Con qué frecuencia recibe del estado municipal?",
                    ),
                ),
                (
                    "frecuencia_estado_nacional",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="frecuencia_estado_nacional",
                        to="relevamientos.frecuenciarecepcionrecursos",
                        verbose_name="4.1.10 Si recibe, ¿Con qué frecuencia recibe del estado nacional?",
                    ),
                ),
                (
                    "frecuencia_estado_provincial",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="frecuencia_estado_provincial",
                        to="relevamientos.frecuenciarecepcionrecursos",
                        verbose_name="4.1.12 Si recibe, ¿Con qué frecuencia recibe del estado provincial?",
                    ),
                ),
                (
                    "frecuencia_otros",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="frecuencia_otros",
                        to="relevamientos.frecuenciarecepcionrecursos",
                        verbose_name="4.1.18 Si recibe, ¿Con qué frecuencia recibe de otras fuentes?",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fuente de recursos",
                "verbose_name_plural": "Fuentes de recursos",
            },
        ),
        migrations.CreateModel(
            name="FuncionamientoPrestacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("servicio_por_turnos", models.BooleanField(default=False)),
                (
                    "cantidad_turnos",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(3),
                        ],
                    ),
                ),
            ],
            options={
                "verbose_name": "Funcionamiento de comedor",
                "verbose_name_plural": "Funcionamientos de comedores",
            },
        ),
        migrations.CreateModel(
            name="MotivoExcepcion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Motivo de excepcion",
                "verbose_name_plural": "Motivos de excepcion",
            },
        ),
        migrations.CreateModel(
            name="Prestacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lunes_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "lunes_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "martes_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "miercoles_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "jueves_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "viernes_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "sabado_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_desayuno_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_desayuno_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_almuerzo_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_almuerzo_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_merienda_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_merienda_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_cena_actual",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "domingo_cena_espera",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
            ],
            options={
                "verbose_name": "Prestacion",
                "verbose_name_plural": "Prestaciones",
            },
        ),
        migrations.CreateModel(
            name="PuntoEntregas",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reciben_otros_recepcion",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Otros"
                    ),
                ),
                (
                    "otros_punto_entregas",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Otros punto de entrega",
                    ),
                ),
                (
                    "existe_punto_entregas",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "funciona_punto_entregas",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "observa_entregas",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "retiran_mercaderias_distribucion",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "retiran_mercaderias_comercio",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "reciben_dinero",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "registran_entrega_bolsones",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TipoAccesoComedor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de acceso al comedor",
                "verbose_name_plural": "Tipos de acceso al comedor",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoAgua",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de abastecimiento de agua",
                "verbose_name_plural": "Tipos de abastecimientos de agua",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoCombustible",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de abastecimiento de combustible",
                "verbose_name_plural": "Tipos de abastecimientos de combustible",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoDesague",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de desague del hinodoro",
                "verbose_name_plural": "Tipos de desagues del hinodoro",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoDistanciaTransporte",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Distancia de transporte",
                "verbose_name_plural": "Distancias de transporte",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoEspacio",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de espacio fisico",
                "verbose_name_plural": "Tipos de espacios fisicos",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoFrecuenciaBolsones",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Frecuencia de entrega de bolsones",
                "verbose_name_plural": "Frecuencias de entrega de bolsones",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoFrecuenciaInsumos",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Frecuencia de insumos recibidos",
                "verbose_name_plural": "Frecuencias de insumos recibidos",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoGestionQuejas",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de gestion de quejas",
                "verbose_name_plural": "Tipos de gestion de quejas",
            },
        ),
        migrations.CreateModel(
            name="TipoInsumos",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de insumo recibido",
                "verbose_name_plural": "Tipos de insumos recibidos",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoModalidadPrestacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de Modalidad de Prestación",
                "verbose_name_plural": "Tipos de Modalidades de Prestación",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoModuloBolsones",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Frecuencia de entrega de bolsones",
                "verbose_name_plural": "Frecuencias de entrega de bolsones",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoOtrosRecepcion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Otros tipos de insumos recibidos",
                "verbose_name_plural": "Otros tipos de insumos recibidos",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoRecurso",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de recurso recibido",
                "verbose_name_plural": "Tipos de recursos recibidos",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="TipoTecnologia",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Tipo de tecnologia",
                "verbose_name_plural": "Tipos de tecnologia",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="Relevamiento",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("estado", models.CharField(blank=True, max_length=255, null=True)),
                ("fecha_visita", models.DateTimeField(blank=True, null=True)),
                (
                    "territorial_nombre",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "territorial_uid",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("observacion", models.TextField(blank=True, null=True)),
                ("docPDF", models.URLField(blank=True, null=True)),
                (
                    "responsable_es_referente",
                    models.BooleanField(blank=True, default=True, null=True),
                ),
                ("imagenes", models.JSONField(blank=True, default=list, null=True)),
                (
                    "anexo",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.anexo",
                    ),
                ),
                (
                    "colaboradores",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.colaboradores",
                    ),
                ),
                (
                    "comedor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="comedores.comedor",
                    ),
                ),
                (
                    "compras",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.fuentecompras",
                    ),
                ),
                (
                    "espacio",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.espacio",
                    ),
                ),
                (
                    "excepcion",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.excepcion",
                    ),
                ),
                (
                    "funcionamiento",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.funcionamientoprestacion",
                    ),
                ),
                (
                    "prestacion",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.prestacion",
                    ),
                ),
                (
                    "punto_entregas",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.puntoentregas",
                    ),
                ),
                (
                    "recursos",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.fuenterecursos",
                    ),
                ),
                (
                    "responsable_relevamiento",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="responsable_relevamientos",
                        to="comedores.referente",
                    ),
                ),
            ],
            options={
                "verbose_name": "Relevamiento",
                "verbose_name_plural": "Relevamientos",
            },
        ),
        migrations.AddField(
            model_name="puntoentregas",
            name="frecuencia_entrega_bolsones",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="relevamientos.tipofrecuenciabolsones",
                verbose_name="Frecuencia de entrega de bolsones",
            ),
        ),
        migrations.AddField(
            model_name="puntoentregas",
            name="frecuencia_recepcion_mercaderias",
            field=models.ManyToManyField(
                blank=True,
                related_name="frecuencia_recepcion_mercaderias",
                to="relevamientos.tipofrecuenciabolsones",
                verbose_name="frecuencia de recepcion de mercaderias",
            ),
        ),
        migrations.AddField(
            model_name="puntoentregas",
            name="tipo_comedor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="comedores.tipodecomedor",
                verbose_name="Tipo de comedor",
            ),
        ),
        migrations.AddField(
            model_name="puntoentregas",
            name="tipo_modulo_bolsones",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="relevamientos.tipomodulobolsones",
                verbose_name="Tipo de modulo de bolsones",
            ),
        ),
        migrations.AddField(
            model_name="funcionamientoprestacion",
            name="modalidad_prestacion",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="relevamientos.tipomodalidadprestacion",
                verbose_name="1.1.4 Modalidad de prestación",
            ),
        ),
        migrations.AddField(
            model_name="fuenterecursos",
            name="recursos_donaciones_particulares",
            field=models.ManyToManyField(
                blank=True,
                related_name="fuentes_donaciones_particulares",
                to="relevamientos.tiporecurso",
                verbose_name="4.1.9 ¿Qué tipo de recursos recibe de donaciones particulares?",
            ),
        ),
        migrations.AddField(
            model_name="fuenterecursos",
            name="recursos_estado_municipal",
            field=models.ManyToManyField(
                blank=True,
                related_name="fuentes_estado_municipal",
                to="relevamientos.tiporecurso",
                verbose_name="4.1.15 ¿Qué tipo de recursos recibe del estado municipal?",
            ),
        ),
        migrations.AddField(
            model_name="fuenterecursos",
            name="recursos_estado_nacional",
            field=models.ManyToManyField(
                blank=True,
                related_name="fuentes_estado_nacional",
                to="relevamientos.tiporecurso",
                verbose_name="4.1.11 ¿Qué tipo de recursos recibe del estado nacional?",
            ),
        ),
        migrations.AddField(
            model_name="fuenterecursos",
            name="recursos_estado_provincial",
            field=models.ManyToManyField(
                blank=True,
                related_name="fuentes_estado_provincial",
                to="relevamientos.tiporecurso",
                verbose_name="4.1.13 ¿Qué tipo de recursos recibe del estado provincial?",
            ),
        ),
        migrations.AddField(
            model_name="fuenterecursos",
            name="recursos_otros",
            field=models.ManyToManyField(
                blank=True,
                related_name="fuentes_otros",
                to="relevamientos.tiporecurso",
                verbose_name="4.1.19 ¿Qué tipo de recursos recibe de otras fuentes?",
            ),
        ),
        migrations.AddField(
            model_name="excepcion",
            name="motivo",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="relevamientos.motivoexcepcion",
            ),
        ),
        migrations.CreateModel(
            name="EspacioPrestacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "espacio_equipado",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "tiene_ventilacion",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "tiene_salida_emergencia",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "salida_emergencia_senializada",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "tiene_equipacion_incendio",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "tiene_botiquin",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "tiene_buena_iluminacion",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "tiene_sanitarios",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "gestion_quejas_otro",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="En caso de otro, especificar",
                    ),
                ),
                ("informacion_quejas", models.BooleanField(default=False)),
                (
                    "desague_hinodoro",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.tipodesague",
                        verbose_name="2.3.9 Si la respuesta anterior es SI, el desagüe del inodoro es",
                    ),
                ),
                (
                    "frecuencia_limpieza",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.frecuencialimpieza",
                        verbose_name="2.4.1 ¿Con qué frecuencia se realiza la limpieza de las instalaciones?",
                    ),
                ),
                (
                    "gestion_quejas",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.tipogestionquejas",
                        verbose_name="2.3.10 ¿El Comedor/Merendero cuenta con alguna forma de registro de los reclamos sobre la prestacion alimentaria",
                    ),
                ),
            ],
            options={
                "verbose_name": "Espacio donde se brinda la prestacion del Comedor/Merendero",
                "verbose_name_plural": "Espacios donde se brinda la prestacion del Comedor/Merendero",
            },
        ),
        migrations.CreateModel(
            name="EspacioCocina",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "espacio_elaboracion_alimentos",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "almacenamiento_alimentos_secos",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                ("heladera", models.BooleanField(blank=True, default=False, null=True)),
                ("freezer", models.BooleanField(blank=True, default=False, null=True)),
                (
                    "recipiente_residuos_organicos",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "recipiente_residuos_reciclables",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "otros_residuos",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "recipiente_otros_residuos",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "abastecimiento_agua_otro",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="En caso de otro, especificar",
                    ),
                ),
                (
                    "instalacion_electrica",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "abastecimiento_agua",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="relevamientos.tipoagua",
                        verbose_name="2.2.8 El abastecimiento del agua es con",
                    ),
                ),
                (
                    "abastecimiento_combustible",
                    models.ManyToManyField(
                        blank=True,
                        related_name="espacios",
                        to="relevamientos.tipocombustible",
                        verbose_name="2.2.7 Para cocinar utiliza",
                    ),
                ),
            ],
            options={
                "verbose_name": "Espacio de cocina y almacenamiento de alimentos",
                "verbose_name_plural": "Espacios de cocina y almacenamiento de alimentos",
            },
        ),
        migrations.AddField(
            model_name="espacio",
            name="cocina",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="relevamientos.espaciococina",
            ),
        ),
        migrations.AddField(
            model_name="espacio",
            name="prestacion",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="relevamientos.espacioprestacion",
            ),
        ),
        migrations.AddField(
            model_name="espacio",
            name="tipo_espacio_fisico",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="relevamientos.tipoespacio",
                verbose_name="2.1.1 ¿En qué tipo de espacio físico funciona el Comedor/Merendero?",
            ),
        ),
        migrations.CreateModel(
            name="ClasificacionComedor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("puntuacion_total", models.IntegerField()),
                (
                    "fecha",
                    models.DateTimeField(blank=True, default=django.utils.timezone.now),
                ),
                (
                    "categoria",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="comedores.categoriacomedor",
                    ),
                ),
                (
                    "comedor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="comedores.comedor",
                    ),
                ),
                (
                    "relevamiento",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="relevamientos.relevamiento",
                    ),
                ),
            ],
            options={
                "verbose_name": "Clasificacion de Comedor",
                "verbose_name_plural": "Clasificaciones de Comedor",
            },
        ),
        migrations.AddField(
            model_name="anexo",
            name="acceso_comedor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="relevamientos.tipoaccesocomedor",
                verbose_name="Al comedor se accede por...",
            ),
        ),
        migrations.AddField(
            model_name="anexo",
            name="distancia_transporte",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="relevamientos.tipodistanciatransporte",
                verbose_name="¿Qué distancia hay desde el comedor al transporte público más cercano?",
            ),
        ),
        migrations.AddField(
            model_name="anexo",
            name="frecuencia_insumo",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="relevamientos.tipofrecuenciainsumos",
                verbose_name="¿Con qué frecuencia recibió estos insumos?",
            ),
        ),
        migrations.AddField(
            model_name="anexo",
            name="tecnologia",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="relevamientos.tipotecnologia",
                verbose_name="¿El espacio comunitario cuenta con?",
            ),
        ),
        migrations.AddField(
            model_name="anexo",
            name="tipo_insumo",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="relevamientos.tipoinsumos",
                verbose_name="¿Qué tipo de insumo recibió?",
            ),
        ),
        migrations.AddIndex(
            model_name="relevamiento",
            index=models.Index(
                fields=["comedor"], name="relevamient_comedor_76ee4f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="relevamiento",
            unique_together={("comedor", "fecha_visita")},
        ),
    ]
